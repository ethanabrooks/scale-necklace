{"version":3,"sources":["notes.ts","scales.ts","styles.ts","App.tsx"],"names":["notes","sharp","flat","NUM_NOTES","length","AScales","len","flatten","BScales","map","b","head","tail","a","tag","scale","CScales","c","getStepsA","concat","getStepsB","getStepsC","scales","styles","StyleSheet","create","container","flex","height","button","width","necklace","alignItems","randomNumber","n","Math","floor","random","rotate","array","start","slice","App","React","useState","setScale","root","setRoot","loaded","state","setState","playing","notesToPlay","useEffect","synth","Synth","toDestination","interval","note","triggerAttack","octave","setInterval","triggerRelease","clearInterval","scaleIndices","reduce","soFar","player","Button","title","onPress","Text","rootButton","scaleButton","newScale","View","style","_","i","color","theta","PI","left","cos","top","sin","j","t","indices","includes","TouchableOpacity","position","backgroundColor","borderRadius","justifyContent","e","shiftKey","k","indexOf","key"],"mappings":"qOACaA,EAAgB,CAC3B,CAAEC,MAAO,IAAKC,KAAM,KACpB,CAAED,MAAO,KAAMC,KAAM,MACrB,CAAED,MAAO,IAAKC,KAAM,KACpB,CAAED,MAAO,KAAMC,KAAM,MACrB,CAAED,MAAO,IAAKC,KAAM,KACpB,CAAED,MAAO,IAAKC,KAAM,KACpB,CAAED,MAAO,KAAMC,KAAM,MACrB,CAAED,MAAO,IAAKC,KAAM,KACpB,CAAED,MAAO,KAAMC,KAAM,MACrB,CAAED,MAAO,IAAKC,KAAM,KACpB,CAAED,MAAO,KAAMC,KAAM,MACrB,CAAED,MAAO,IAAKC,KAAM,MAETC,EAAYH,EAAMI,OCA/B,SAASC,EAAQC,GACf,OAAIA,GAAO,EACF,GAEFC,kBAAgB,CACrBC,EAAQF,EAAM,GAAGG,KAAI,SAACC,GAAD,MAAW,CAAEC,KAAM,CAAC,GAAIC,KAAMF,MACnDF,EAAQF,EAAM,GAAGG,KAAI,SAACC,GAAD,MAAW,CAAEC,KAAM,CAAC,EAAG,GAAIC,KAAMF,QACrDD,KAAI,SAACI,GAAD,MAAgB,CAAEC,IAAK,IAAKC,MAAOF,MAG5C,SAASL,EAAQF,GACf,OAAIA,GAAO,EACF,GAEFC,kBAAgB,CACrBF,EAAQC,EAAM,GAAGG,KAAI,SAACI,GAAD,MAAmB,CAAEF,KAAM,CAAC,GAAIC,KAAMC,MAC3DG,EAAQV,EAAM,GAAGG,KAAI,SAACQ,GAAD,MAAW,CAAEN,KAAM,CAAC,GAAIC,KAAMK,MACnDD,EAAQV,EAAM,GAAGG,KAAI,SAACQ,GAAD,MAAW,CAAEN,KAAM,CAAC,EAAG,GAAIC,KAAMK,QACrDR,KAAI,SAACC,GAAD,MAAgB,CAAEI,IAAK,IAAKC,MAAOL,MAG5C,SAASM,EAAQV,GACf,OAAIA,EAAM,EACD,GACS,GAAPA,EACF,CAAC,CAAEQ,IAAK,IAAKC,MAAO,OAEpBR,kBAAe,CAACF,EAAQC,GAAME,EAAQF,KAAOG,KAAI,SAACQ,GAAD,MAAgB,CACtEH,IAAK,IACLC,MAAOE,MAKb,SAASC,EAAUL,GACjB,IAAMF,EAAiBE,EAAEE,MAAMJ,KAC/B,OAAqB,OAAjBE,EAAEE,MAAMH,KACHD,EAEFA,EAAKQ,OAAOC,EAAUP,EAAEE,MAAMH,OAGvC,SAASQ,EAAUV,GACjB,IAAMC,EAAiBD,EAAEK,MAAMJ,KAC/B,OAAQD,EAAEK,MAAMH,KAAKE,KACnB,IAAK,IACH,OAAOH,EAAKQ,OAAOD,EAAUR,EAAEK,MAAMH,OACvC,IAAK,IACH,OAAOD,EAAKQ,OAAOE,EAAUX,EAAEK,MAAMH,QAI3C,SAASS,EAAUJ,GACjB,GAAgB,OAAZA,EAAEF,MACJ,MAAO,GAET,OAAQE,EAAEF,MAAMD,KACd,IAAK,IACH,OAAOI,EAAUD,EAAEF,OACrB,IAAK,IACH,OAAOK,EAAUH,EAAEF,QAIlB,IAAMO,EAAqBN,EAAQb,GAAWM,IAAIY,GC7E5CE,E,KAASC,EAAWC,OAAO,CACtCC,UAAW,CACTC,KAAM,EACNC,OAAQ,QAEVC,OAAQ,CACNF,KAAM,EACNG,MAAO,QAETC,SAAU,CACRJ,KAAM,EACNG,MAAO,OACPE,WAAY,Y,ykBCGhB,SAASC,EAAaC,GACpB,OAAOC,KAAKC,MAAMD,KAAKE,SAAWH,GAOpC,SAASI,EAAUC,EAAYC,GAC7B,OAAOD,EAAME,MAAMD,GAAOrB,OAAOoB,EAAME,MAAM,EAAGD,IAGnC,SAASE,IAAoB,IAAD,EACfC,IAAMC,SAAgBtB,EAAO,IADd,WAClCP,EADkC,KAC3B8B,EAD2B,OAEjBF,IAAMC,SAAiB,GAFN,WAElCE,EAFkC,KAE5BC,EAF4B,OAGfH,mBAAgB,CAAEI,QAAQ,IAHX,WAGlCC,EAHkC,KAG3BC,EAH2B,KAKnCC,EAAmBF,EAAMD,QAAUC,EAAMG,YAAYhD,OAAS,EAEpEiD,qBAAU,WACR,IAAMC,GAAQ,IAAIC,KAAQC,gBAC1BN,EAAS,CACPF,QAAQ,EACRM,MAAOA,EACPF,YAAa,OAEd,CAACF,IAEJG,qBAAU,WACR,GAAIJ,EAAMD,OAAQ,CAAC,IAAD,MACeC,EAAMG,aAA9BzC,EADS,KACAC,EADA,WAEhB,GAAIuC,EAAS,CACX,IAAIM,EACEC,EAAO1D,EAAMW,EAAOR,GAO1B,OANA8C,EAAMK,MAAMK,cAAZ,GACKD,EAAKzD,OAAQU,EAAOR,EAnBR,EAmB6ByD,IAE9CH,EAAWI,aAAY,WACrBX,EAAS,EAAD,KAAMD,GAAN,IAAaG,YAAaxC,OACjC,KACI,WACLqC,EAAMK,MAAMQ,iBACRL,GAAUM,cAAcN,QAIjC,CAACR,IAEJ,IAAMe,EAAsBjD,EAAMkD,QAChC,SAACC,EAAchC,GACb,OAAOgC,EAAM/C,OAAO+C,EAAMA,EAAM9D,OAAS,GAAK8B,KAEhD,CAACY,IAGGqB,EAAsBlB,EAAMD,OAChC,kBAACoB,EAAA,EAAD,CACEC,MAAOlB,EAAU,QAAU,OAC3BmB,QAAS,WACPpB,EAAS,EAAD,KAAMD,GAAN,IAAaG,YAAaD,EAAU,GAAKa,QAIrD,kBAACO,EAAA,EAAD,mBAGIC,EACJ,kBAACJ,EAAA,EAAD,CACEC,MAAO,iBACPC,QAAS,kBAAMvB,EAAQd,EAAa9B,OAIlCsE,EACJ,kBAACL,EAAA,EAAD,CACEC,MAAO,kBACPC,QAAS,WACP,IAAMI,EAAWpD,EAAOW,EAAaX,EAAOlB,SAC5CyC,EAASP,EAAOoC,EAAUzC,EAAayC,EAAStE,aAMhD2B,EACJ,kBAAC4C,EAAA,EAAD,CACEC,MAAO,CACLjD,KAAM,EACNG,MALQ,MAQT9B,EAAMS,KAAI,SAACoE,EAASC,GACnB,IAxFgBpE,EA8FZqE,EANEC,EAAS,EAAI7C,KAAK8C,GAAKH,EAAK3E,EAAYgC,KAAK8C,GAAK,EAElDC,GAXE,KAWe,EAAI/C,KAAKgD,IAAIH,IAX5B,IAUiB,GACiC,EACpDI,EAZE,KAYc,EAAIjD,KAAKkD,IAAIL,IAAW,EAC1CM,IAAQR,EAAIhC,IA5FApC,EA4FMP,GA3FVO,GAAKA,EA4FX6E,EAAIvF,EAAMsF,GAGVE,EAAUxB,EAAavD,KAAI,SAACqE,GAAD,OAAOA,EAAI3E,KAS5C,OAPE4E,EADE9B,EAAMD,QAAUC,EAAMG,YAAY,GAAKjD,GAAamF,EAC9C,UACCE,EAAQC,SAASH,GAClB,OAEA,YAIR,kBAACI,EAAA,EAAD,CACEd,MAAO,CACL9C,MA7BE,IAUiB,EAoBnBF,OA9BE,IAUiB,EAqBnB+D,SAAU,WACVT,KAAMA,EACNE,IAAKA,EACLQ,gBAAiBb,EACjBc,aAAc,GACd7D,WAAY,SACZ8D,eAAgB,UAElBxB,QAAS,SAACyB,GAER,GAAIA,EAAEC,SAAU,CACd,IAAMR,EAAUxB,EAAavD,KAAI,SAACwF,GAAD,OAAOA,EAAI9F,KACxCqF,EAAQC,SAASH,KACnBzC,EAASP,EAAOvB,EAAOyE,EAAQU,QAAQZ,KACvCvC,EAAQuC,SAGVvC,EAAQuC,IAGZa,IAAKrB,GAEL,kBAACP,EAAA,EAAD,CAAMK,MAAO,CAAEG,MAAO,UACnBQ,EAAEtF,OAASsF,EAAErF,KAAOqF,EAAEtF,MAAWsF,EAAEtF,MAAnC,IAA4CsF,EAAErF,WAO3D,OACE,kBAACyE,EAAA,EAAD,CAAMC,MAAOrD,EAAOG,WAClB,kBAACiD,EAAA,EAAD,CAAMC,MAAOrD,EAAOM,QACjB2C,EACAC,EACAN,GAEH,kBAACQ,EAAA,EAAD,CAAMC,MAAOrD,EAAOQ,UAAWA,M","file":"static/js/app.e1605e48.chunk.js","sourcesContent":["export type Note = { sharp: string; flat: string };\nexport const notes: Note[] = [\n  { sharp: \"c\", flat: \"c\" },\n  { sharp: \"c#\", flat: \"db\" },\n  { sharp: \"d\", flat: \"d\" },\n  { sharp: \"d#\", flat: \"eb\" },\n  { sharp: \"e\", flat: \"e\" },\n  { sharp: \"f\", flat: \"f\" },\n  { sharp: \"f#\", flat: \"gb\" },\n  { sharp: \"g\", flat: \"g\" },\n  { sharp: \"g#\", flat: \"ab\" },\n  { sharp: \"a\", flat: \"a\" },\n  { sharp: \"a#\", flat: \"bb\" },\n  { sharp: \"b\", flat: \"b\" },\n];\nexport const NUM_NOTES = notes.length;\n","import * as A from \"fp-ts/lib/Array\";\nimport { flatten } from \"fp-ts/lib/Array\";\nimport { NUM_NOTES } from \"./notes\";\n\ntype AScale = { head: [1]; tail: B } | { head: [1, 1]; tail: B };\ntype BScale =\n  | { head: [2]; tail: C }\n  | { head: [2, 3]; tail: C }\n  | { head: [3]; tail: A };\ntype CScale = A | B | null;\n\ntype A = { tag: \"A\"; scale: AScale };\ntype B = { tag: \"B\"; scale: BScale };\ntype C = { tag: \"C\"; scale: CScale };\n\nfunction AScales(len: number): A[] {\n  if (len <= 1) {\n    return [];\n  }\n  return flatten<AScale>([\n    BScales(len - 1).map((b: B) => ({ head: [1], tail: b })),\n    BScales(len - 2).map((b: B) => ({ head: [1, 1], tail: b })),\n  ]).map((a: AScale) => ({ tag: \"A\", scale: a }));\n}\n\nfunction BScales(len: number): B[] {\n  if (len <= 0) {\n    return [];\n  }\n  return flatten<BScale>([\n    AScales(len - 3).map((a: A): BScale => ({ head: [3], tail: a })),\n    CScales(len - 2).map((c: C) => ({ head: [2], tail: c })),\n    CScales(len - 5).map((c: C) => ({ head: [2, 3], tail: c })),\n  ]).map((b: BScale) => ({ tag: \"B\", scale: b }));\n}\n\nfunction CScales(len: number): C[] {\n  if (len < 0) {\n    return [];\n  } else if (len == 0) {\n    return [{ tag: \"C\", scale: null }];\n  } else {\n    return flatten<A | B>([AScales(len), BScales(len)]).map((c: CScale) => ({\n      tag: \"C\",\n      scale: c,\n    }));\n  }\n}\n\nfunction getStepsA(a: A): number[] {\n  const head: number[] = a.scale.head;\n  if (a.scale.tail === null) {\n    return head;\n  }\n  return head.concat(getStepsB(a.scale.tail));\n}\n\nfunction getStepsB(b: B): number[] {\n  const head: number[] = b.scale.head;\n  switch (b.scale.tail.tag) {\n    case \"A\":\n      return head.concat(getStepsA(b.scale.tail));\n    case \"C\":\n      return head.concat(getStepsC(b.scale.tail));\n  }\n}\n\nfunction getStepsC(c: C): number[] {\n  if (c.scale === null) {\n    return [];\n  }\n  switch (c.scale.tag) {\n    case \"A\":\n      return getStepsA(c.scale);\n    case \"B\":\n      return getStepsB(c.scale);\n  }\n}\n\nexport const scales: number[][] = CScales(NUM_NOTES).map(getStepsC);\n","import { StyleSheet } from \"react-native\";\n\nexport const styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    height: \"100%\",\n  },\n  button: {\n    flex: 1,\n    width: \"100%\",\n  },\n  necklace: {\n    flex: 3,\n    width: \"100%\",\n    alignItems: \"center\",\n  },\n});\n","import React, { useEffect, useState } from \"react\";\nimport { Button, Text, TouchableOpacity, View } from \"react-native\";\nimport \"./scales\";\nimport { scales } from \"./scales\";\nimport { styles } from \"./styles\";\nimport { Note, notes, NUM_NOTES } from \"./notes\";\nimport { Synth } from \"tone\";\n\nexport type Scale = number[];\nexport type State =\n  | { loaded: false }\n  | {\n      loaded: true;\n      synth: Synth;\n      notesToPlay: Scale;\n    };\n\nfunction randomNumber(n: number): number {\n  return Math.floor(Math.random() * n);\n}\n\nfunction mod(a: number, b: number): number {\n  return ((a % b) + b) % b;\n}\n\nfunction rotate<X>(array: X[], start: number) {\n  return array.slice(start).concat(array.slice(0, start));\n}\n\nexport default function App(): JSX.Element {\n  const [scale, setScale] = React.useState<Scale>(scales[0]);\n  const [root, setRoot] = React.useState<number>(0);\n  const [state, setState] = useState<State>({ loaded: false });\n  const octave: number = 3;\n  const playing: boolean = state.loaded && state.notesToPlay.length > 0;\n\n  useEffect(() => {\n    const synth = new Synth().toDestination();\n    setState({\n      loaded: true,\n      synth: synth,\n      notesToPlay: [],\n    });\n  }, [setState]);\n\n  useEffect(() => {\n    if (state.loaded) {\n      const [head, ...tail]: Scale = state.notesToPlay;\n      if (playing) {\n        let interval: number | null = null;\n        const note = notes[head % NUM_NOTES];\n        state.synth.triggerAttack(\n          `${note.sharp}${head < NUM_NOTES ? octave : octave + 1}`\n        );\n        interval = setInterval(() => {\n          setState({ ...state, notesToPlay: tail });\n        }, 300);\n        return () => {\n          state.synth.triggerRelease();\n          if (interval) clearInterval(interval);\n        };\n      }\n    }\n  }, [state]);\n\n  const scaleIndices: Scale = scale.reduce(\n    (soFar: Scale, n: number) => {\n      return soFar.concat(soFar[soFar.length - 1] + n);\n    },\n    [root]\n  );\n\n  const player: JSX.Element = state.loaded ? (\n    <Button\n      title={playing ? \"Pause\" : \"Play\"}\n      onPress={function () {\n        setState({ ...state, notesToPlay: playing ? [] : scaleIndices });\n      }}\n    />\n  ) : (\n    <Text>loading...</Text>\n  );\n\n  const rootButton: JSX.Element = (\n    <Button\n      title={\"Randomize Root\"}\n      onPress={() => setRoot(randomNumber(NUM_NOTES))}\n    />\n  );\n\n  const scaleButton: JSX.Element = (\n    <Button\n      title={\"Randomize Scale\"}\n      onPress={() => {\n        const newScale = scales[randomNumber(scales.length)];\n        setScale(rotate(newScale, randomNumber(newScale.length)));\n      }}\n    />\n  );\n\n  const width = 500;\n  const necklace = (\n    <View\n      style={{\n        flex: 1,\n        width: width,\n      }}\n    >\n      {notes.map((_: Note, i: number) => {\n        const theta = (2 * Math.PI * i) / NUM_NOTES - Math.PI / 2;\n        const diameter = width / 6;\n        const left = (width * (1 + Math.cos(theta)) - diameter) / 2;\n        const top = (width * (1 + Math.sin(theta))) / 2;\n        let j = mod(i + root, NUM_NOTES);\n        const t = notes[j];\n        let color: string;\n\n        const indices = scaleIndices.map((i) => i % NUM_NOTES);\n        if (state.loaded && state.notesToPlay[0] % NUM_NOTES == j) {\n          color = \"#2F4F4F\";\n        } else if (indices.includes(j)) {\n          color = \"grey\";\n        } else {\n          color = \"lightgrey\";\n        }\n\n        return (\n          <TouchableOpacity\n            style={{\n              width: diameter,\n              height: diameter,\n              position: \"absolute\",\n              left: left,\n              top: top,\n              backgroundColor: color,\n              borderRadius: 50,\n              alignItems: \"center\",\n              justifyContent: \"center\",\n            }}\n            onPress={(e) => {\n              // @ts-ignore\n              if (e.shiftKey) {\n                const indices = scaleIndices.map((k) => k % NUM_NOTES);\n                if (indices.includes(j)) {\n                  setScale(rotate(scale, indices.indexOf(j)));\n                  setRoot(j);\n                }\n              } else {\n                setRoot(j);\n              }\n            }}\n            key={i}\n          >\n            <Text style={{ color: \"white\" }}>\n              {t.sharp == t.flat ? t.sharp : `${t.sharp}/${t.flat}`}\n            </Text>\n          </TouchableOpacity>\n        );\n      })}\n    </View>\n  );\n  return (\n    <View style={styles.container}>\n      <View style={styles.button}>\n        {rootButton}\n        {scaleButton}\n        {player}\n      </View>\n      <View style={styles.necklace}>{necklace}</View>\n    </View>\n  );\n}\n"],"sourceRoot":""}