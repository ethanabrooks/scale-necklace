{"version":3,"sources":["scales.ts","styles.ts","App.tsx"],"names":["notes","sharp","flat","NUM_NOTES","length","AScales","len","flatten","BScales","map","b","head","tail","a","tag","scale","CScales","c","getStepsA","concat","getStepsB","getStepsC","scales","styles","StyleSheet","create","container","flex","height","justifyContent","alignItems","button","width","necklace","randomNumber","n","Math","floor","random","App","React","useState","setScale","root","setRoot","loaded","state","setState","useRef","useEffect","synth","Synth","toMaster","now","Text","rootButton","Button","title","onPress","scaleIndices","reduce","soFar","View","style","_","i","theta","PI","left","cos","top","sin","j","t","color","includes","TouchableOpacity","position","backgroundColor","borderRadius","triggerAttack","triggerRelease","key"],"mappings":"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","file":"static/js/app.770bad29.chunk.js","sourcesContent":["import * as A from \"fp-ts/lib/Array\";\nimport { flatten } from \"fp-ts/lib/Array\";\n\nexport type Note = { sharp: string; flat: string };\nexport const notes: Note[] = [\n    { sharp: \"c\", flat: \"c\" },\n    { sharp: \"c#\", flat: \"db\" },\n    { sharp: \"d\", flat: \"d\" },\n    { sharp: \"d#\", flat: \"eb\" },\n    { sharp: \"e\", flat: \"e\" },\n    { sharp: \"f\", flat: \"f\" },\n    { sharp: \"f#\", flat: \"gb\" },\n    { sharp: \"g\", flat: \"g\" },\n    { sharp: \"g#\", flat: \"ab\" },\n    { sharp: \"a\", flat: \"a\" },\n    { sharp: \"a#\", flat: \"bb\" },\n    { sharp: \"b\", flat: \"b\" },\n];\n\nexport const NUM_NOTES = notes.length;\n\n\ntype AScale = { head: [1]; tail: B } | { head: [1, 1]; tail: B };\ntype BScale =\n    | { head: [2]; tail: C }\n    | { head: [2, 3]; tail: C }\n    | { head: [3]; tail: A };\ntype CScale = A | B | null;\n\ntype A = { tag: \"A\"; scale: AScale };\ntype B = { tag: \"B\"; scale: BScale };\ntype C = { tag: \"C\"; scale: CScale };\n\nfunction AScales(len: number): A[] {\n    if (len <= 1) {\n        return [];\n    }\n    return flatten<AScale>([\n        BScales(len - 1).map((b: B) => ({ head: [1], tail: b })),\n        BScales(len - 2).map((b: B) => ({ head: [1, 1], tail: b })),\n    ]).map((a: AScale) => ({ tag: \"A\", scale: a }));\n}\n\nfunction BScales(len: number): B[] {\n    if (len <= 0) {\n        return [];\n    }\n    return flatten<BScale>([\n        AScales(len - 3).map((a: A): BScale => ({ head: [3], tail: a })),\n        CScales(len - 2).map((c: C) => ({ head: [2], tail: c })),\n        CScales(len - 5).map((c: C) => ({ head: [2, 3], tail: c })),\n    ]).map((b: BScale) => ({ tag: \"B\", scale: b }));\n}\n\nfunction CScales(len: number): C[] {\n    if (len < 0) {\n        return [];\n    } else if (len == 0) {\n        return [{ tag: \"C\", scale: null }];\n    } else {\n        return flatten<A | B>([AScales(len), BScales(len)]).map((c: CScale) => ({\n            tag: \"C\",\n            scale: c,\n        }));\n    }\n}\n\nfunction getStepsA(a: A): number[] {\n    const head: number[] = a.scale.head;\n    if (a.scale.tail === null) {\n        return head;\n    }\n    return head.concat(getStepsB(a.scale.tail));\n}\n\nfunction getStepsB(b: B): number[] {\n    const head: number[] = b.scale.head;\n    switch (b.scale.tail.tag) {\n        case \"A\":\n            return head.concat(getStepsA(b.scale.tail));\n        case \"C\":\n            return head.concat(getStepsC(b.scale.tail));\n    }\n}\n\nfunction getStepsC(c: C): number[] {\n    if (c.scale === null) {\n        return [];\n    }\n    switch (c.scale.tag) {\n        case \"A\":\n            return getStepsA(c.scale);\n        case \"B\":\n            return getStepsB(c.scale);\n    }\n}\n\nexport const scales: number[][] = CScales(NUM_NOTES).map(getStepsC);\n","import { StyleSheet } from \"react-native\";\n\nexport const styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        height: \"100%\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n    },\n    button: {\n        flex: 1,\n        width: \"100%\",\n        justifyContent: \"center\"\n    },\n    necklace: {\n        flex: 3,\n        width: \"100%\",\n        alignItems: \"center\",\n    },\n});\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { Button, Text, TouchableOpacity, View } from \"react-native\";\nimport \"./scales\";\nimport { Note, NUM_NOTES, scales, notes } from \"./scales\";\nimport { now, Synth } from \"tone\";\nimport { styles } from \"./styles\";\nimport { Seconds } from \"tone/build/esm/core/type/Units\";\n\ntype Scale = number[];\n\nfunction randomNumber(n: number): number {\n  return Math.floor(Math.random() * n);\n}\n\nfunction mod(a: number, b: number): number {\n  return ((a % b) + b) % b;\n}\n\ntype State = { loaded: false } | { loaded: true; synth: Synth; now: Seconds };\n\nexport default function App(): JSX.Element {\n  const [scale, setScale] = React.useState<Scale>(scales[0]);\n  const [root, setRoot] = React.useState<number>(0);\n  const [state, setState] = useState<State>({ loaded: false });\n  const sampler = useRef<null | Synth>(null);\n\n  useEffect(() => {\n    const synth = new Synth().toMaster();\n    setState({ loaded: true, synth: synth, now: now() });\n  }, []);\n\n  if (!state.loaded) {\n    return <Text>loading...</Text>;\n  }\n\n  const rootButton: JSX.Element = (\n    <Button\n      title={\"Randomize Root\"}\n      onPress={() => setRoot(randomNumber(NUM_NOTES))}\n    />\n  );\n\n  const scaleIndices: number[] = scale.reduce(\n    (soFar: number[], n: number) => {\n      return soFar.concat((soFar[soFar.length - 1] + n) % NUM_NOTES);\n    },\n    [root]\n  );\n  const n = now();\n  const width = 250;\n  const necklace = (\n    <View\n      style={{\n        flex: 1,\n        width: width,\n      }}\n    >\n      {notes.map((_: Note, i: number) => {\n        const theta = (2 * Math.PI * i) / NUM_NOTES - Math.PI / 2;\n        const diameter = width / 6;\n        const left = (width * (1 + Math.cos(theta)) - diameter) / 2;\n        const top = (width * (1 + Math.sin(theta))) / 2;\n        let j = mod(i + root, NUM_NOTES);\n        const t = notes[j];\n        const color = scaleIndices.includes(j) ? \"black\" : \"lightgrey\";\n\n        return (\n          <TouchableOpacity\n            style={{\n              width: diameter,\n              height: diameter,\n              position: \"absolute\",\n              left: left,\n              top: top,\n              backgroundColor: color,\n              borderRadius: 50,\n              alignItems: \"center\",\n              justifyContent: \"center\",\n            }}\n            onPress={() => {\n              setRoot(j);\n              setScale(scales[randomNumber(scales.length)]);\n              state.synth.triggerAttack(`${t.sharp}3`, n);\n              state.synth.triggerRelease(n + 0.5);\n            }}\n            key={i}\n          >\n            <Text style={{ color: \"white\" }}>\n              {t.sharp == t.flat ? t.sharp : `${t.sharp}/${t.flat}`}\n            </Text>\n          </TouchableOpacity>\n        );\n      })}\n    </View>\n  );\n  return (\n    <View style={styles.container}>\n      <View style={styles.button}>{rootButton}</View>\n      <View style={styles.necklace}>{necklace}</View>\n    </View>\n  );\n}\n"],"sourceRoot":""}